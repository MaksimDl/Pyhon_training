from random import randint
import time


def list_gen(min=-5, max=5, list_length=10):
    return [randint(min, max) for i in range(list_length)]


# Процедура для преобразования в двоичную кучу поддерева с корневым узлом i, что является индексом в arr[]. n - размер кучи
def heapify(arr, n, i):
    largest = i # Initialize largest as root
    l = 2 * i + 1   # left = 2*i + 1
    r = 2 * i + 2   # right = 2*i + 2

# Проверяем существует ли левый дочерний элемент больший, чем корень
    if l < n and arr[i] < arr[l]:
        largest = l

    # Проверяем существует ли правый дочерний элемент больший, чем корень
    if r < n and arr[largest] < arr[r]:
        largest = r

    # Заменяем корень, если нужно
    if largest != i:
        arr[i],arr[largest] = arr[largest],arr[i] # свап

        # Применяем heapify к корню.
        heapify(arr, n, largest)

# Основная функция для сортировки массива заданного размера
def heapSort(arr):
    n = len(arr)

    # Построение max-heap.
    for i in range(n, -1, -1):
        heapify(arr, n, i)

    # Один за другим извлекаем элементы
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i] # сва
        heapify(arr, i, 0)

# Управляющий код для тестирования
my_list = list_gen(-2, 10, 100)
start = time.time()
print("unsorted array is: ", my_list)
heapSort(my_list)
n = len(my_list)
print ("Sorted array is")
for i in range(n):
    print ("%d" %my_list[i], end = ', ')

print()
print(f"sort lasted for {time.time() - start} ms ")


